Makefile 1

hellomake: hellomake.c hellofunc.c
     gcc -o hellomake hellomake.c hellofunc.c -I.

If you put this rule into a file called Makefile or makefile and then type make on the command line it will execute the compile command as you have written it in the makefile. Note that make with no arguments executes the first rule in the file. Furthermore, by putting the list of files on which the command depends on the first line after the :, make knows that the rule hellomake needs to be executed if any of those files change. Immediately, you have solved problem #1 and can avoid using the up arrow repeatedly, looking for your last compile command. However, the system is still not being efficient in terms of compiling only the latest changes.

One very important thing to note is that there is a tab before the gcc command in the makefile. There must be a tab at the beginning of any command, and make will not be happy if it's not there.

Versão mais básica de Makefile:

--- Início do arquivo Makefile ---
<nome da regra ou task>: <lista de fontes em C>
TAB<comando de compilação e linkagem para executavel>
--- Fim do arquivo Makefile ---

O conteúdo poderia ser:

compilar: hellomake.c hellofunc.c
	gcc -o hellomake hellomake.c hellofunc.c -I.

E para executar no prompt de comando:

C:\Ex2>make compilar

Ou somente:

C:\Ex2>make

Já que "compilar" é a 1a regra (ou task no caso de Rakefiles no Ruby ou Invoke no Python)